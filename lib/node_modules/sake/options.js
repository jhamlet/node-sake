
var nomnom      = require("nomnom"),
    FS          = require("fs"),
    Path        = require("path"),
    sutil       = require("sake/util"),
    pkgFile     = Path.join(__dirname, "..", "..", "..", "package.json"),
    pkgJson     = FS.readFileSync(pkgFile, "utf8"),
    pkgInfo     = JSON.parse(pkgJson),
    wordwrap    = require("wordwrap"),
    nomArgs     = [],
    opts
;
//---------------------------------------------------------------------------
// Define our options
//---------------------------------------------------------------------------
opts = {
    task: {
        string:     "[TASK]",
        help:       "Name of the task to run. Defaults to 'default'.",
        position:   0,
        default:    "default"
    },
    
    taskArgs: {
        string:     "[ARGUMENTS ...]",
        help:       "Zero or more arguments to pass to the task invoked.",
        position:   1
    },
    
    envArgs: {
        string:     "[ENV=VALUE ...]",
        help:       "Zero or more arguments to translate into environment variables.",
        position:   2
    },
    
    sakefile: {
        string:     "-f, --sakefile PATH",
        help:       "PATH to Sakefile to run instead of searching for one."
    },
    
    dryrun: {
        string:     "-n, --dry-run",
        help:       "Do a dry run without executing actions.",
        flag:       true,
        default:    false
    },

    listTasks: {
        string:     "-T, --tasks",
        help:       "List tasks with descriptions and exit.",
        flag:       true,
        default:    false
    },
    
    listPrereqs: {
        string:     "-P, --prerequisites",
        help:       "List tasks and their prerequisites and exit.",
        flag:       true,
        default:    false
    },
    
    requires: {
        string:     "-r, --require MODULE",
        help:       "Require MODULE before executing Sakefile and expose the " +
                    "MODULE under a sanitized namespace (i.e.: coffee-script => " +
                    "[sake.]coffeeScript).",
        list:       true,
        default:    []
    },
    
    synchronous: {
        string:     "-S, --synchronous",
        help:       "Make all standard tasks 'synchronous' by default.",
        flag:       true,
        default:    false
    },
    
    debug: {
        string:     "-d, --debug",
        help:       "Enable additional debugging output.",
        flag:       true,
        default:    false
    },
    
    quiet: {
        string:     "-q, --quiet",
        help:       "Suppress informational messages.",
        flag:       true,
        default:    false
    },
    
    version: {
        string:     "-V, --version",
        help:       "Print the version of sake and exit.",
        flag:       true,
        callback: function () {
            return "sake version " + pkgInfo.version;
        }
    },

    help: {
        string:     "-h, --help",
        help:       "Print this help information and exit.",
        flag:       true,
        default:    false
    }
};
//---------------------------------------------------------------------------
// Formatting Helpers
//---------------------------------------------------------------------------
function formatHelp (opts) {
    var helpW = 60,
        wrap =  wordwrap(helpW),
        optCols,
        pad
    ;
    
    optCols = Object.keys(opts).reduce(function (t, key) {
        var optW = opts[key].string.length;
        return optW > t ? optW : t;
    }, 0);
    
    pad = optCols + 7;
    
    Object.keys(opts).forEach(function (key) {
        var opt = opts[key];
        if (!opt.hasOwnProperty("position")) {
            opt.help = wrap(opt.help);
            opt.help = opt.help.replace(/\n/g, "\n" + Array(pad).join(" "));
        }
    });

    return opts;
}
//---------------------------------------------------------------------------
// Process Environment Arguments
//---------------------------------------------------------------------------
process.argv.slice(2).forEach(function (arg) {
    var i, key, val;
    
    if (~(i = arg.indexOf("="))) {
        key = arg.slice(0, i);
        val = sutil.jsonToValue(arg.slice(i+1));
        process.env[key] = val;
    }
    else {
        nomArgs.push(arg);
    }
});

//---------------------------------------------------------------------------
// Export the parsed options
//---------------------------------------------------------------------------
module.exports = nomnom.
    script(pkgInfo.name).
    help(wordwrap(100)(
        (pkgInfo.name[0].toUpperCase() + pkgInfo.name.slice(1)) + " will look " +
        "within the current directory, and all parent directories, for the " +
        "first `Sakefile` it can find, and then invoke the TASK. If no task " + 
        "is given, it will try to invoke the task named \"default\".\n\n" +
        "`Sakefile` can be one of \"Sakefile\", \"sakefile\", \"Sakefile.js\", " +
        "\"sakefile.js\", \"Sakefile.coffee\", or \"sakefile.coffee\""
    )).
    options(formatHelp(opts)).
    parse(nomArgs);
