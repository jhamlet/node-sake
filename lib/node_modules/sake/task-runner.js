
var Proteus = require("proteus"),
    async   = require("async"),
    Task    = require("sake/task"),
    options = require("sake/options"),
    log     = require("sake/logger"),
    RUNNERS = {},
    ActionRunner,
    TaskRunner
;

ActionRunner = Proteus.Class.derive({
    
    init: function (task, callback) {
        this.task = task;
        this.callback = callback;
    },
    
    run: function () {
        var task        = this.task,
            actions     = task.actions,
            noActions   = !actions || !actions.length,
            isDryRun    = options.dryrun
        ;

        if (noActions) {
            this.callback();
            return;
        }
        
        log.debug("Starting actions for " + task.fqn);

        async.series(
            actions.map(function (action, idx) {
                return function (cb) {
                    var fn = function () {
                            log.debug(
                                "Action " + idx + " complete" +
                                (isDryRun ? " (dry-run)" : "")
                            );
                            task.removeListener("actionComplete", fn);
                            cb();
                        }
                    ;
                    
                    task.on("actionComplete", fn);
                    log.debug(
                        "Execute action " + idx + (isDryRun ? " (dry-run)" : "")
                    );
                    if (isDryRun) {
                        task.done();
                    }
                    else {
                        action.apply(task, [task].concat(task.arguments));
                    }
                };
            }),
            this.callback
        );
    }
});

TaskRunner = Proteus.Class.derive({
    
    init: function (task, callback) {
        this.task = task;
        this.callback = callback;
        this.actionRunner = new ActionRunner(task, this.complete.bind(this));
        RUNNERS[task.fqn] = this;
    },
    
    run: function () {
        var task    = this.task,
            prereqs = task.prerequisites
        ;
        
        if (task.isRunning) {
            this.complete();
            return;
        }
        
        task.isRunning = true;
        
        log.debug("Determining prerequisites for " + task.fqn);

        async.series(
            prereqs.map(function (preqName, idx) {
                return function (asyncCb) {
                    var preqTask = Task.get(preqName);
                    if (!preqTask.alreadyRun || preqTask.isNeeded) {
                        (new TaskRunner(preqTask, asyncCb)).run();
                    }
                    else {
                        asyncCb();
                    }
                };
            }),
            this.actionRunner.run.bind(this.actionRunner)
        );
    },
    
    complete: function () {
        this.task.complete();
        this.callback && this.callback();
        this.destroy();
    },
    
    destroy: function () {
        var task = this.task;
        delete task.isRunning;
        delete RUNNERS[task.fqn];
        delete this.task;
        delete this.callback;
        delete this.actionRunner;
    }
});

module.exports = {
    run: function (task) {
        var runner, cb;
        
        if (!task.isRunning) {
            (new TaskRunner(task)).run();
        }
        else {
            // runner = RUNNERS[task.fqn];
            // cb = runner.callback;
            // runner.callback = function () {
            //     cb();
            //     callback();
            // };
        }
    }
};
