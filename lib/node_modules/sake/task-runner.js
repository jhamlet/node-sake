
var Proteus = require("proteus"),
    async   = require("async"),
    Task    = require("sake/task"),
    options = require("sake/options"),
    log     = require("sake/logger"),
    ActionRunner,
    TaskRunner
;

ActionRunner = Proteus.Class.derive({
    
    init: function (task, callback) {
        this.task = task;
        this.callback = callback;
        this.run();
    },
    
    run: function () {
        var task        = this.task,
            actions     = task.actions,
            alreadyRun  = task.alreadyRun,
            isNeeded    = task.isNeeded,
            noActions   = !actions || !actions.length,
            isDryRun    = options.dryrun
        ;

        log.debug("Starting actions for " + task.fqn);
        if (alreadyRun || !isNeeded || noActions) {
            if (alreadyRun) {
                log.debug("Already ran " + task.fqn);
            }
            else if (!isNeeded) {
                log.debug(task.fqn + " is not needed");
            }
            else if (noActions) {
                log.debug("No actions for " + task.fqn);
            }
            return this.callback();
        }
        
        async.series(
            actions.map(function (action, idx) {
                return function (cb) {
                    var fn = function () {
                            log.debug(
                                "Action " + idx + " complete" +
                                (isDryRun ? " (dry-run)" : "")
                            );
                            task.removeListener("actionComplete", fn);
                            cb();
                        }
                    ;
                    
                    task.on("actionComplete", fn);
                    log.debug(
                        "Execute action " + idx + (isDryRun ? " (dry-run)" : "")
                    );
                    if (isDryRun) {
                        task.done();
                    }
                    else {
                        action.apply(task, [task].concat(task.arguments));
                    }
                };
            }),
            this.callback
        );
    }
});

TaskRunner = Proteus.Class.derive({
    
    init: function () {
        var queue = this.queue = async.queue(this.processTask.bind(this), 1);
        queue.drain = this.complete.bind(this);
        this.inited = true;
    },
    
    push: function (task, callback) {
        var queue = this.queue,
            prereqs = task.prerequisites
        ;
        
        if (this.inited) {
            this.firstTask = task;
            log.info(task.fqn);
            this.inited = false;
        }
        
        prereqs.forEach(function (preq) {
            var t = Task.get(preq);
            t.invoke();
            queue.push(t);
        });
        
        queue.push(task, callback);
    },
    
    processTask: function (task, callback) {
        new ActionRunner(task, callback);
    },
    
    complete: function () {
        log.info(this.firstTask.fqn + " complete");
    }
});

module.exports = new TaskRunner();
