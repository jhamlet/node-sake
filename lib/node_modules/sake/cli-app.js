
var Proteus = require("proteus"),
    FS      = require("fs"),
    Path    = require("path"),
    Glob    = require("glob"),
    nutil   = require("util"),
    sutil   = require("sake/util"),
    Task    = require("sake/task"),
    log     = require("sake/logger"),
    DEFAULT_SAKEFILES = [
        "Sakefile", "sakefile", "Sakefile.js", "sakefile.js",
        "Sakefile.coffee", "sakefile.coffee",
    ]
;

module.exports = {
    
    run: function () {
        var opts     = this.options,
            cmd      = opts._[0],
            taskArgs = opts._.slice(1).map(sutil.jsonToValue),
            task
        ;
        
        // log.debug(opts);
        
        this.loadSakefile(opts.sakefile);
        
        this.processRunOptions();
        
        Task.invoke.apply(Task, [opts.taskName].concat(taskArgs));
    },
    
    processRunOptions: function () {
        var opts = this.options,
            pattern = opts._[0],
            exit = false;
        
        if (opts.listTasks) {
            this.listTasks(pattern);
            exit = true;
        }
        else if (opts.listPrereqs) {
            this.listTasksAndPrerequisites(pattern);
            exit = true;
        }
        
        if (exit) {
            process.exit(0);
        }
    },
    
    loadSakefile: function (filepath) {
        var opts = this.options;
        
        filepath = filepath || this.sakefileLocation();

        if (!Path.existsSync(filepath)) {
            throw new Error("Can not find a Sakefile.");
        }

        filepath = Path.resolve(filepath);
        opts.sakefile = filepath;
        
        log.debug("chdir: " + !opts.nochdir);
        log.debug(opts);
        
        if (opts.nochdir) {
            log.info("sake file: " + filepath);
        }
        else {
            process.chdir(Path.dirname(filepath));
        }

        log.info("sake in " + process.cwd());

        (this.sake = require("sake")).load(filepath);
    },
    
    sakefileLocation: (function () {
        var sakefile;
        
        function haveSakefile (dir) {
            return (sakefile = this.haveSakefile(dir));
        }
        
        return function () {
            var opts    = this.options,
                here    = process.cwd(),
                start   = here,
                dirs    = [here],
                pathDirs = [],
                found
            ;

            if (!opts.nosearch) {
                while (here !== "/") {
                    here = Path.resolve(here, "..");
                    dirs.push(here);
                }
            }

            if (process.env.SAKE_PATH && !opts.nosystem) {
                pathDirs.push.apply(pathDirs, process.env.SAKE_PATH.split(":"));
            }

            log.debug("Search paths: \n" + dirs.concat(pathDirs).map(function (p) {
                return (Array(4).join(" ") + "\"" + p + "\"");
            }).join("\n"));

            found = dirs.some(haveSakefile, this) ||
                    (pathDirs.some(haveSakefile, this) && (opts.nochdir = true));

            return sakefile;
        };
    }()),
    
    haveSakefile: function (here) {
        var pattern = Path.join(here, "[Ss]akefile{.js,.coffee,}"),
            files = Glob.sync(pattern)
        ;
        return files && files[0];
    },
    
    listTasks: function (pattern) {
        var nameW = 0;
        
        log("Tasks:");
        
        pattern = pattern && new RegExp(pattern);
        
        Task.getAll().filter(function (task) {
            return task.description && (!pattern || pattern.test(task.fqn));
        }).map(function (task) {
            var name = task.fqn, len  = name.length;
            nameW = len > nameW ? len : nameW;
            return task;
        }).forEach(function (t) {
            var name = t.fqn, len  = name.length;
            
            log("  " + name + Array(nameW - len + 5).join(" ") + "# " +
                t.description);
        });
    },
    
    listTasksAndPrerequisites: (function () {
        
        function formatTask (task, pad) {
            return (pad ? pad : "") + task.fqn + " (" + task.type + ")";
        }
        
        return function (pattern) {
            log("Tasks and Prerequisites: ");
            
            pattern = pattern && new RegExp(pattern);
            
            Task.getAll().filter(function (task) {
                return !pattern || pattern.test(task.fqn);
            }).forEach(function (task) {
                var preqs       = task.prerequisites,
                    pad         = "  "
                ;

                log(formatTask(task, pad));
                preqs.forEach(function (name) {
                    log(formatTask(Task.lookup(name, task.namespace), pad + pad));
                });
            });
        };
    }()),
    
    get options () {
        return require("sake/options");
    }
};
