
var Proteus         = require("proteus"),
    Path            = require("path"),
    nutil           = require("util"),
    taskDescription = "",
    futil,
    sake,
    Task,
    FileTask,
    FileList,
    FileCreateTask
;
//---------------------------------------------------------------------------
// Privates
//---------------------------------------------------------------------------
function defineTask (TaskClass, name, prereqs, action) {
    var task = new TaskClass(name, prereqs, action);
    
    task.description = taskDescription;
    taskDescription = "";
    
    return task;
}

function defineTaskSync (TaskClass, name, prereqs, action) {
    if (!action && typeof prereqs === "function") {
        action = prereqs;
        prereqs = null;
    }
    
    return defineTask(TaskClass, name, prereqs, function (t) {
        var v = action && action(t);
        t.done();
    });
}
//---------------------------------------------------------------------------
// Public/Exports
//---------------------------------------------------------------------------
sake = {
    
    run: function (filepath) {
        return require("sake/vm").run(filepath);
    },
    
    log: function () {
        var opts = sake.options;
        
        if (!(opts.quiet || opts.silent) || opts.verbose) {
            Proteus.slice(arguments).forEach(function (arg) {
                arg = typeof arg === "string" ?
                    "[" + arg + "]" :
                    nutil.inspect(arg, false, 100);
                process.stderr.write(arg + "\n");
            });
        }
    },
    
    description: function (txt) {
        taskDescription += txt;
    },
    
    directory: (function () {
        
        function mkdirAction (t) {
            if (!Path.existsSync(t.name)) {
                futil.mkdir_p(t.name);
            }
        }

        return function (name) {
            var dirpath = name;

            while (dirpath !== "." && dirpath !== "/") {
                defineTaskSync(FileCreateTask, dirpath, mkdirAction);
                dirpath = Path.dirname(dirpath);
            }

            return Task.get(name);
        };
    }()),
    
    async: require("async")
};
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
/**
 * Define the exports as a 'getter', and then re-define it as a plain property
 * once everything is all setup and ready to go.
 */
Object.defineProperty(module, "exports", {
    get: function () {
        sake.options = require("sake/options");

        Object.defineProperty(module, "exports", {
            value: sake,
            enumerable: true
        });

        // Require these here to avoid recursive requires
        futil                                   = require("sake/file-utils");
        sake.Task           = Task              = require("sake/task");
        sake.FileTask       = FileTask          = require("sake/file-task");
        sake.FileCreateTask = FileCreateTask    = require("sake/file-create-task");
        sake.FileList       = FileList          = require("sake/file-list");
        // bind our task creation functions
        sake.task           = defineTask.bind(sake, Task);
        sake.taskSync       = defineTaskSync.bind(sake, Task);
                            
        sake.file           = defineTask.bind(sake, FileTask);
        sake.fileSync       = defineTaskSync.bind(sake, FileTask);
        
        sake.fileCreateSync = defineTaskSync.bind(sake, FileCreateTask);
        sake.fileCreate     = defineTask.bind(sake, FileCreateTask);
        
        // some other functions that need late binding
        sake.desc           = sake.description.bind(sake);
        sake.include        = sake.load         = sake.run.bind(sake);

        return sake;
    },
    enumerable: true,
    configurable: true
});
