
var Proteus     = require("proteus"),
    EM          = require("events").EventEmitter,
    FileList    = require("sake/file-list"),
    FileTask    = require("sake/file-task"),
    defProp     = Object.defineProperty,
    defProps    = Object.defineProperties,
    isArray     = Array.isArray,

    CURRENT_NAMESPACE = "",

    Task
;

module.exports = Task = Proteus.Class.derive({
    //-----------------------------------------------------------------------
    // Static/Class Properties
    //-----------------------------------------------------------------------
    self: {
        
        tasks: {},
        
        initialize: function (obj, args) {
            var task = this.lookup(args[0]);
            
            if (task) {
                task.enhance(args[1], args[2]);
                this.emit("updated", task);
            }

            return task;
        },
        
        get: function (name) {
            var task = this.lookup(name) || FileTask.synthesize(name);
            
            if (!task) {
                throw new Error("No task '" + name + "'");
            }
            
            return task;
        },
        
        getAll: function () {
            return Object.keys(this.tasks).map(this.get);
        },
        
        lookup: function (name) {
            if (name instanceof this) {
                return name;
            }
            else if (typeof name === "function") {
                return this.lookup(name());
            }
            
            return this.get(name) || this.find({name: name})[0] || null;
            
        },
        
        has: function (name) {
            return Boolean(this.lookup(name));
        },
        
        find: function (args, sortFn) {
            var tasks, i;

            // Check args if it is an object and passed a name with namespace
            // delimitier of ":"
            if (typeof args !== "function" && !args.namespace && args.name) {
                if (~(i = args.name.indexOf(":"))) {
                    args.namespace = args.name.slice(i+1);
                    args.name = args.name.slice(0, i);
                }
                else {
                    args.namespace = this.namespace;
                }
            }
            
            tasks = Object.keys(this.tasks).filter(function (t) {
                return t.matches(args);
            });
            
            if (sortFn) {
                tasks.sort(sortFn);
            }
            
            return tasks;
        },
        
        destroy: function (name) {
            delete this.tasks[name];
        },
        
        get namespace () {
            return CURRENT_NAMESPACE;
        },
        
        set namespace (name) {
            CURRENT_NAMESPACE = name;
            this.emit("namespaceChanged", name, this);
        }
    },
    //-----------------------------------------------------------------------
    // Instance Properties
    //-----------------------------------------------------------------------
    init: function (name, prereqs, action) {
        var i, namespace;
        
        if (~(i = name.indexOf(":"))) {
            namespace = name.slice(i+1);
            name = name.slice(0, i);
        }
        
        if (typeof prereqs === "function") {
            action = prereqs;
            prereqs = null;
        }
        
        this.name = name;
        this.description = "";
        this.namespace = namespace || CURRENT_NAMESPACE;
        this.actions = [];

        defProps(this, {
            __pending__: {
                value: true,
                writable: true
            },
            __pendingPrereqs__: {
                value: []
            },
            __prerequisites__: {
                value: []
            },
            prerequisites: {
                get: function () {
                    this.resolve(this);
                    return this.__prerequisites__;
                },
                enumerable: true
            }
        });
        
        this.enhance(prereqs, action);
        
        this.enable();
    },
    
    enhance: function (prereqs, action) {
        var isArr = isArray(prereqs),
            isFL  = prereqs instanceof FileList
        ;
        
        if (!isArr || !isFL) {
            throw new Error("Prerequisites must be an Array or a FileList");
        }
        
        prereqs = isFL ? [prereqs] : prereqs;
        
        this.addPrerequisite.apply(this, prereqs);
        
        if (action) {
            this.addAction(action);
        }
        
        this.emit("enhanced", this);
        
        return this;
    },
    
    invoke: function () {
        if (!this.alreadyRun && this.isNeeded) {
            this.execute.apply(this, arguments);
        }
        return this;
    },
    
    execute: function () {
        var doneFn = function doneFn () {
                this.running = this.alreadyRun = true;
                this.removeListener("done", doneFn);
                this.removeListener("complete", doneFn);
            }.bind(this)
        ;
        
        this.arguments = Proteus.slice(arguments);
        this.running = true;
        
        this.on("done", doneFn);
        this.on("complete", doneFn);
        
    },
    
    resolve: (function () {
        function addPending (preq) {
            Task.get(preq); // make sure the prerequisite exists as a task
            
            if (!~this.indexOf(preq)) {
                this.push(preq);
            }
        }
        
        return function () {
            if (this.__pending__) {
                this.__pendingPrereqs__.forEach(function (preq) {
                    if (preq instanceof FileList || isArray(preq)) {
                        preq.forEach(addPending, this);
                    }
                    else {
                        addPending.call(this, preq);
                    }
                }, this.__pendingPrereqs__);
                this.__pendingPrereqs__.length = 0;
                this.__pending__ = false;
            }
        };
    }()),
    
    addPrerequisite: function () {
        Proteus.slice(arguments).forEach(function (preq) {
            this.push(preq);
        }, this.__pendingPrereqs__);
        this.__pending__ = true;
        return this;
    },
    
    addPrerequisites: Proteus.aliasMethod("addPrerequisite"),
    
    addAction: function () {
        Proteus.slice(arguments).forEach(function (fn) {
            if (typeof fn !== "function") {
                throw new Error("Task actuon must be a function.");
            }
            this.push(fn);
        }, this.actions);
        return this;
    },
    
    addActions: Proteus.aliasMethod("addAction"),
    
    enable: function () {
        this.alreadyRun = false;
        this.enabled = true;
        this.emit("enabled", this);
        return this;
    },
    
    destroy: function () {
        Task.destroy(this.name);
    },

    matches: function (args) {
        var key;
        
        if (typeof args === "function") {
            return args(this);
        }
        
        for (key in args) {
            if (this[key] !== args[key]) {
                return false;
            }
        }
        
        return true;
    },
    
    get isNeeded () {
        return true;
    },
    
    get timestamp () {
        var max = Math.max.apply(
                Math,
                this.prerequisites.map(function (p) {
                    return p.timestamp;
                })
            );
        
        return isFinite(max) ? max : Date.now();
    }
    
});

// Give the Task class event emitter functionality
Proteus.extend(Task, EM.prototype);
// And the same for the instances of Task
Task.include(EM);
