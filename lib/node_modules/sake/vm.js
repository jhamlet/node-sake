var Proteus     = require("proteus"),
    VM          = require("vm"),
    Path        = require("path"),
    FS          = require("fs"),
    sake        = require("sake"),
    resolve     = require("resolve"),
    fileUtils   = require("sake/file-utils"),
    nodeRequire = require,
    nodePath    = process.env.NODE_PATH,
    nodePaths   = nodePath ? nodePath.split(":") : [],
    INCLUDE_PATHS = [],
    sakeContext
;

//---------------------------------------------------------------------------
// Utility for resolving requires
//---------------------------------------------------------------------------
INCLUDE_PATHS.push(__dirname, process.cwd());
function sakeRequire (name) {
    try {
        return nodeRequire(name);
    }
    catch (e) {
        return nodeRequire(resolve.sync(name, {
            basedir: INCLUDE_PATHS[INCLUDE_PATHS.length-1],
            paths: nodePaths.concat(INCLUDE_PATHS.slice(0, INCLUDE_PATHS.length))
        }));
    }
}
//---------------------------------------------------------------------------
// Create the Run Context
//---------------------------------------------------------------------------
sakeContext = VM.createContext(
    Proteus.merge(
        {
            console: console,
            require: sakeRequire,
            process: process
        },
        sake,
        fileUtils
    )
);
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = {
    
    run: function (filepath) {
        var curPath = INCLUDE_PATHS[INCLUDE_PATHS.length-1],
            isFn, code, ret
        ;
        
        if (typeof filepath === "function") {
            isFn = true;
            code = "(" + filepath.toString() + "())";
            filepath = "anonymous function";
        }
        else {
            filepath = Path.resolve(curPath, filepath);
            INCLUDE_PATHS.push(Path.dirname(filepath));

            code = FS.readFileSync(filepath, "utf8");
            
            if (Path.extname(filepath).toLowerCase() === ".coffee") {
                try {
                    code = require("coffee-script").compile(code);
                }
                catch (e) {
                    throw new Error("Coffee script is not installed");
                }
            }
        }
        
        ret = VM.runInContext(code, sakeContext, filepath);
        
        if (!isFn) {
            INCLUDE_PATHS.pop();
        }
        
        return ret;
    }
    
};
