
var Proteus = require("proteus"),
    FS      = require("fs"),
    Path    = require("path"),
    CP      = require("child_process"),
    log     = require("sake/logger"),
    sake    = require("sake"),
    Task    = require("sake/task"),

    DEFAULT_FILE_MODE       = "0644",
    DEFAULT_DIRECTORY_MODE  = "0777",
    
    futil   = {}
;

module.exports = Proteus.merge(futil, {
    sh: function (cmd, fn) {
        log("sh: " + cmd);
        CP.exec(cmd, function (error, stdout, stderr) {
            if (!error && fn) {
                fn(error, stdout);
            }
            else if (error && fn) {
                fn(error, stderr);
            }
            else if (error) {
                log(stderr);
            }
        });
    },

    mkdir: function (path, mode) {
        log("mkdir " + path);
        FS.mkdirSync(path, mode);
    },
    
    mkdir_p: function (path, mode) {
        var cpath = path,
            missing = []
        ;
        
        log("mkdir -p " + path);
        mode = mode || DEFAULT_DIRECTORY_MODE;
        while (!Path.existsSync(cpath) && !(cpath === "." || cpath === "/")) {
            missing.push(Path.basename(cpath));
            cpath = Path.dirname(cpath);
        }
        
        missing.reduceRight(function (t, c) {
            var p = Path.join(t, c);
            futil.mkdir(p, mode);
            return p;
        }, cpath);
    },

    rm: function () {
        Proteus.slice(arguments, 0).forEach(function (path) {
            log("rm " + path);
            FS.unlinkSync(path);
        });
    },

    rm_rf: function () {
        Proteus.slice(arguments).forEach(function (path) {
            var stats;
            
            log("rm -rf " + path);
            
            function filepath (f) {
                return Path.join(path, f);
            }

            if ((stats = FS.statSync(path)).isDirectory()) {
                futil.rm_rf.apply(
                    futil,
                    FS.readdirSync(path).map(filepath)
                );
                FS.rmdirSync(path);
            }
            else {
                futil.rm(path);
            }
        });
    },

    cp: function (from, to) {
        log("cp " + from + " " + to);
        futil.write(to, futil.read(from));
    },

    mv: function (from, to) {
        log("mv " + from + " " + to);
        FS.renameSync(from, to);
    },
    
    ln: function (from, to) {
        log("ln " + from + " " + to);
        FS.linkSync(from, to);
    },

    ln_s: function (from, to) {
        log("ln -s " + from + " " + to);
        FS.symlinkSync(from, to);
    },
    
    cat: function () {
        var args = Proteus.slice(arguments);
        log("cat " + args.join(" "));
        return args.map(function (path) {
            if (Array.isArray(path)) {
                return futil.cat.apply(futil, path);
            }
            return futil.read(path, "utf8");
        }).join("");
    },
    
    read: function (path, enc) {
        return FS.readFileSync.apply(FS, arguments);
    },
    
    slurp: Proteus.aliasMethod("read", futil),
    
    write: function (/*path, data, enc, mode*/) {
        var args = Proteus.slice(arguments, 0, 3),
            mode = arguments[3] || "w"
        ;
        if (mode === "a") {
            args[1] = args[1] + futil.read(args[0]);
        }
        FS.writeFileSync.apply(FS, args);
    },
    
    spit: Proteus.aliasMethod("write", futil)
});
