
var Path = require("path"),
    FS   = require("fs"),
    Task = require("sake/task")
;

//------------------------------------------------------------------------
// Publics
//------------------------------------------------------------------------
module.exports = Task.derive((function () {
    var proto = {};
    
    proto.self = {
        synthesize: function (filepath) {
            return Path.existsSync(filepath) ? new this(filepath) : null;
        }
    };
    
    proto.type = "file-task";
    
    Object.defineProperties(proto, {
        exists: {
            get: function () {
                return Path.existsSync(this.name);
            },
            enumerable: true
        },
        /**
         * @property isNeeded
         * @type {boolean}
         * @override Task#isNeeded
         */
        isNeeded: {
            get: function () {
                return !this.exists || this.prerequisites.some(function (preq) {
                        return Task.get(preq).timestamp > this.timestamp;
                    }, this);
            },
            set: function (v) {
                // Re-define this property if someone sets it.
                Object.defineProperty(this, "isNeeded", {
                    value: v,
                    enumerable: true,
                    writable: true
                });
            },
            enumerable: true,
            configurable: true
        },
        /**
         * @property timestamp
         * @type {integer}
         * @override Task#timestamp
         */
        timestamp: {
            get: function () {
                if (this.exists) {
                    return (new Date(FS.statSync(this.name).mtime)).getTime();
                }
                // A non existing file's timestamp is infinitely in the future.
                return Infinity;
            },
            enumerable: true
        },
    });
    
    return proto;
}()));
