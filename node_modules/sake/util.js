var Path = require('path');

module.exports = {
    /**
     * Convert a string into a JSON data structure, or just return the string
     * @param {String} src
     * @returns {Mixed}
     */
    jsonToValue: function (src) {
        var val;
        try {
            val = JSON.parse(src);
        }
        catch (e) {
            return src;
        }
        return val;
    },
    /**
     * Convert a string to a camel-cased version.  By default the input
     * string is split on whitespace, hyphens, or underscores, and each word
     * after the first is title-cased and then joined together with the
     * first.  i.e:
     * 
     *      "my-name-space" => "myNameSpace"
     *      "My-Class_name" => "MyClassName"
     * 
     * @param txt {string} the string to transform
     * @param splitDelim {RegExp|string} optional, where to split the string.
     *      Defaults to /[\s\-]/
     * @returns {string}
     */
    toCamelCase: function (txt, splitDelim) {
        var words = txt.split(splitDelim || /[\s\-]/);
        return words[0] + words.slice(1).map(function (w) {
            w = w.toLowerCase();
            return w[0].toUpperCase() + w.slice(1);
        }).join("");
    },
    
    STACK_PATH_REGEX: /\(?([^:]+)(:\d+)+\)?/,
    /**
     * Using an error stack, try to determine the calling filepath.
     * @param {String} basepath optional the file path before the one needed
     * @returns {string}
     */
    fileFromStackTrace: function (basepath) {
        var self = module.exports,
            error = new Error(),
            stack = error.stack.split("\n"),
            i = stack.length,
            line, part, idx, match;
        
        basepath = basepath || __filename;
        for (i = 0, len = stack.length; i < len; i++) {
            // We loop till we find the first occurance,
            // and then we grab as many as occur in sequence
            if (~stack[i].indexOf(basepath)) {
                while (i < len && ~stack[i].indexOf(basepath)) {
                    i++;
                }
                break;
            }
        }

        line = stack[i].split(/\s+/);
        part = line[line.length - 1];
        match = self.STACK_PATH_REGEX.exec(part);
        // console.log(stack);
        return match && Path.resolve(match[1]);
    },
    /**
     * As above, but returns the calling directory
     * @param {String} basepath optional the file path before the one needed
     * @returns {String}
     */
    directoryFromStackTrace: function (basepath) {
        var self = module.exports,
            filepath = self.fileFromStackTrace(basepath);
        return filepath && Path.dirname(filepath) || process.cwd();
    }
};
