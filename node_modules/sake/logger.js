console.log(process);

var Proteus = require("proteus"),
    nutil   = require("util"),
    stdout  = process.stdout,
    stderr  = process.stderr,
    defaultConfig = {
        outstream: stdout,
        bookends: ["", ""],
        formatter: function (arg) {
            var ends = this.bookends;
            return ends[0] + (typeof arg === "string" ?
                arg :
                nutil.inspect(arg, false, 100)) + ends[1];
        }
    },
    logConfig = defaultConfig,
    configs = {}
;

function getOpts () {
    return require("sake/options");
}

function log () {
    var stream = logConfig.outstream;
    
    Proteus.slice(arguments).forEach(function (arg) {
        stream.write(logConfig.formatter(arg) + "\n");
    });
}

function logIf (cond, cfg, args) {
    var tmp;
    
    if (cond) {
        tmp = logConfig;
        logConfig = cfg;
        log.apply(log, args);
        logConfig = tmp;
    }
}

configs.log  = Proteus.create(defaultConfig);
configs.info = Proteus.create(defaultConfig, {
    outstream: stderr,
    bookends: ["[", "]"]
});
configs.debug = Proteus.create(configs.info, {
    bookends: ["** ", ""]
});
configs.warn  = Proteus.create(configs.info, {
    bookends: ["<WARNING: ", ">"]
});
configs.error = Proteus.create(configs.info, {
    bookends: ["<ERROR: ", ">"]
});

log.log   = function () { logIf(!getOpts().silent, configs.log, arguments); };

log.info  = function () { logIf(!getOpts().quiet, configs.info, arguments); };

log.debug = function () { logIf(getOpts().debug, configs.debug, arguments); };

log.warn  = function () { logIf(true, configs.warn, arguments); };

log.error = function () { logIf(true, configs.error, arguments); };

module.exports = log;