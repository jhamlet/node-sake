
var nomnom      = require("nomnom"),
    FS          = require("fs"),
    Path        = require("path"),
    sutil       = require("sake/util"),
    pkgFile     = Path.join(__dirname, "..", "..", "package.json"),
    pkgJson     = FS.readFileSync(pkgFile, "utf8"),
    pkgInfo     = JSON.parse(pkgJson),
    wordwrap    = require("wordwrap"),
    nomArgs     = [],
    opts,
    parsedOpts
;
//---------------------------------------------------------------------------
// Define our options
//---------------------------------------------------------------------------
opts = {
    taskname: {
        string:     "[TASKNAME]",
        help:       "Name of the task to run. Defaults to 'default'.",
        position:   0,
        default:    "default"
    },
    
    arguments: {
        string:     "[ARGUMENTS ...]",
        help:       "Zero or more arguments to pass to the task invoked.",
        position:   1
    },
    
    env: {
        string:     "[ENV=VALUE ...]",
        help:       "Zero or more arguments to translate into environment variables.",
        position:   2
    },
    
    sakefile: {
        string:     "-f, --sakefile PATH",
        help:       "PATH to Sakefile to run instead of searching for one."
    },
    
    tasks: {
        string:     "-T, --tasks [PATTERN]",
        help:       "List tasks with descriptions (optionally, just those matching " +
                    "PATTERN) and exit.",
        flag:       true,
        default:    false
    },
    
    prereqs: {
        string:     "-P, --prereqs [PATTERN]",
        help:       "List tasks and their prerequisites (optionally, just those matching " +
                    "PATTERN) and exit.",
        flag:       true,
        default:    false
    },
    
    requires: {
        string:     "-r, --require MODULE",
        help:       "Require MODULE before executing Sakefile and expose the " +
                    "MODULE under a sanitized namespace (i.e.: coffee-script => " +
                    "[sake.]coffeeScript). Can be specified multiple times.",
        list:       true,
        default:    []
    },
    
    sakelib: {
        string:     "-l, --sakelib PATH",
        help:       "Auto-include any .sake[.js|.coffeee] files in PATH. " + 
                    "(default is 'sakelib'.) Can be specified multiple times",
        list:       true,
        default:    ["sakelib"]
    },
    
    dryrun: {
        string:     "-n, --dry-run",
        help:       "Do a dry run without executing actions.",
        flag:       true,
        default:    false
    },
    
    nochdir: {
        string:     "-C, --no-chdir",
        help:       "Do not change directory to the Sakefile location.",
        flag:       true,
        default:    false
    },
    
    nosearch: {
        string:     "-N, --no-search",
        help:       "Do not search parent directories for a Sakefile.",
        flag:       true,
        default:    false
    },
    
    nosystem: {
        string:     "-G, --no-system",
        help:       "Do not use SAKE_PATH environment variable to search for a Sakefile.",
        flag:       true,
        default:    false
    },

    sync: {
        string:     "-S, --sync",
        help:       "Make all standard tasks 'synchronous' by default.",
        flag:       true,
        default:    false
    },
    
    debug: {
        string:     "-d, --debug",
        help:       "Enable additional debugging output.",
        flag:       true,
        default:    false
    },
    
    quiet: {
        string:     "-q, --quiet",
        help:       "Suppress informational messages.",
        flag:       true,
        default:    false
    },
    
    version: {
        string:     "-V, --version",
        help:       "Print the version of sake and exit.",
        flag:       true,
        callback: function () {
            return "sake version " + pkgInfo.version;
        }
    },

    help: {
        string:     "-h, --help",
        help:       "Print this help information and exit.",
        flag:       true,
        default:    false
    }
};
//---------------------------------------------------------------------------
// Formatting Helpers
//---------------------------------------------------------------------------
function formatHelp (opts) {
    var helpW = 56,
        wrap =  wordwrap(helpW),
        optCols,
        pad
    ;
    
    optCols = Object.keys(opts).reduce(function (t, key) {
        var optW = opts[key].string.length;
        return optW > t ? optW : t;
    }, 0);
    
    pad = optCols + 7;
    
    Object.keys(opts).forEach(function (key) {
        var opt = opts[key];
        if (!opt.hasOwnProperty("position")) {
            opt.help = wrap(opt.help);
            opt.help = opt.help.replace(/\n/g, "\n" + Array(pad).join(" "));
        }
    });

    return opts;
}
//---------------------------------------------------------------------------
// Process Environment Arguments
//---------------------------------------------------------------------------
process.argv.slice(2).forEach(function (arg) {
    var i, key, val;
    
    if (~(i = arg.indexOf("="))) {
        key = arg.slice(0, i);
        val = sutil.jsonToValue(arg.slice(i+1));
        process.env[key] = val;
    }
    else {
        nomArgs.push(arg);
    }
});

//---------------------------------------------------------------------------
// Parse the options
//---------------------------------------------------------------------------
parsedOpts = nomnom.
    script(pkgInfo.name).
    help(wordwrap(88)(
        "If a Sakefile is not specified, sake searches the current directory, " +
        "and all parent directories, for one (unless -N, --no-search is set). " +
        "Otherwise, if the SAKE_PATH environment variable is defined it " +
        "searches those path(s) (unless -G, --no-system is set).\n\n" +

        "If specified, or found through normal searching (not in SAKE_PATH(s)), " +
        "sake changes the process' current working directory to the directory " +
        "of the found Sakefile (unless -C, --no-chdir is set), otherwise it " +
        "stays where it was run from.\n\n" +
        
        "Sake then invokes the specified TASKNAME, or the \"default\" one.\n\n" +
        
        "Sakefile can be one of \"Sakefile\", or \"sakefile\", with an " +
        "optional extension of \".js\", or \".coffee\"."
    )).
    options(formatHelp(opts)).
    parse(nomArgs);

// aliases and munging
Object.defineProperties(parsedOpts, {
    version: { value: pkgInfo.version, enumerable: true },
    
    arguments: {
        value: parsedOpts._.slice(1).map(sutil.jsonToValue, sutil),
        enumerable: true,
        configurable: false
    },
    
    synchronous: {
        get: function () {
            return parsedOpts.sync;
        },
        set: function (v) {
            parsedOpts.sync = v;
        },
        enumerable: true,
        configurable: false
    },
    
    sakelib: {
        value: (function () {
            var sakelibs = process.env.SAKE_LIB,
                sakelib = parsedOpts.sakelib
            ;
            
            sakelibs = sakelibs && sakelibs.split(":");
            return sakelibs ? sakelib.concat(sakelibs) : sakelib;
        }()),
        enumerable: true,
        configurable: false
    }
});
// remove un-needed values
delete parsedOpts.env;
delete parsedOpts._;

//---------------------------------------------------------------------------
// Export the parsed options
//---------------------------------------------------------------------------
module.exports = parsedOpts;
